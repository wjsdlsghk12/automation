/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // id 'buildlogic.java-application-conventions'
    id 'java'
    id 'application'
}

group 'org.example.app'
version '1.0'

repositories {
    maven {
    url 'https://repo.maven.apache.org/maven2'
        
    }
}

dependencies {
    // Appium
    implementation 'io.appium:java-client:8.4.0'
    testImplementation 'io.appium:java-client:8.4.0'

    // Cucumber
    implementation 'io.cucumber:cucumber-java:7.11.0'
    testImplementation 'io.cucumber:cucumber-java:7.11.0'

    // JUnit 5와 호환되는 Cucumber 플러그인 사용
    implementation 'io.cucumber:cucumber-junit-platform-engine:7.11.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.11.0'

    // Selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.12.0'

    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    
    // JUnit Platform Suite API 의존성 추가
    testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.2'  // Suite API 의존성 추가

    // SLF4J API 의존성 (기본적으로 제공되는 것일 수 있음)
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'

    // // Log4j 의존성 (SLF4J 로깅 구현체)
    // implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    // Log4j2 의존성 추가
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2' // SLF4J와의 호환을 위한 의존
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.app.App'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumberCli(type: JavaExec, dependsOn: [assemble, testClasses]) {
    ignoreExitValue = true // 테스트가 실패해도 빌드가 중단되지 않도록 설정
    main = "io.cucumber.core.cli.Main"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')
    args = [
        '--plugin', 'pretty',
        '--plugin', 'html:target/cucumber-report.html',// Cucumber Reporting (html, xml) 설정 추가
        '--plugin', 'junit:target/cucumber-junit-report.xml',
        '--plugin', 'json:target/cucumber-report.json',
        '--plugin', 'rerun:target/rerun.txt', // Test Scenario 중에 실패한 Scnario 목록만 파일로 출력
        '--glue', 'org.example.app.steps',
        'src/test/resources'
    ]
    if (project.hasProperty('cucumberTags')) {
        args += ['--tags', project.getProperty("cucumberTags")]
    }
}

task sendSlackNotification {
    doLast {
        def webhookUrl = 'https://hooks.slack.com/services/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'  // 여기에 실제 Webhook URL을 넣어야 함
        def message = [
            text: "✅ Cucumber 테스트 완료!\n*결과 파일:* <file://$projectDir/target/cucumber-report.html>"
        ]

        def connection = new URL(webhookUrl).openConnection()
        connection.setRequestMethod('POST')
        connection.setRequestProperty('Content-Type', 'application/json')
        connection.setDoOutput(true)

        def jsonPayload = new groovy.json.JsonBuilder(message).toString()
        connection.getOutputStream().write(jsonPayload.getBytes('UTF-8'))

        def responseCode = connection.getResponseCode()
        if (responseCode == 200) {
            println "✅ Slack 알림 전송 완료"
        } else {
            println "❌ Slack 알림 실패: $responseCode"
        }
    }
}





task cleanRerunFile {
    doLast {
        File rerunFile = file("target/rerun.txt")
        File cleanedFile = file("target/rerun-clean.txt")

        if (rerunFile.exists() && rerunFile.length() > 0) {
            println "🛠 Cleaning rerun.txt..."
            
            // 파일 읽고 "file:" 부분 제거
            def cleanedContent = rerunFile.text.replaceAll("file:", "").trim()
            cleanedFile.text = cleanedContent

            println "✅ Cleaned rerun file: target/rerun-clean.txt"
        } else {
            println "⚠️ No failed tests found in rerun.txt. Skipping cleanup."
        }
    }
}


task rerunCucumber(type: JavaExec) {
    dependsOn cleanRerunFile // 파일 정리 작업 후 실행되도록 설정

    main = "io.cucumber.core.cli.Main"
    classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
    jvmArgs('--add-opens', 'java.base/java.lang=ALL-UNNAMED')

    args = [
        '--plugin', 'pretty',
        '--plugin', 'html:target/cucumber-report-rerun.html',
        '--plugin', 'junit:target/cucumber-junit-report-rerun.xml',
        '--plugin', 'json:target/cucumber-report-rerun.json',
        '--glue', 'org.example.app.steps',
        '@target/rerun-clean.txt' // 수정된 경로 사용
    ]
}

task retryFailedTests {
    dependsOn cleanRerunFile
    doLast {
        int maxRetries = 2 // 최대 3번 재시도
        int attempt = 1

        while (attempt <= maxRetries) {
            println "🔄 [Retry Attempt: $attempt] 실패한 테스트 다시 실행 중..."

            def gradlewCommand = file("${project.rootDir}/gradlew").absolutePath // 절대 경로로 gradlew 찾기
            def gradlewBatCommand = file("${project.rootDir}/gradlew.bat").absolutePath

            def result
            if (System.getProperty("os.name").toLowerCase().contains("win")) {
                result = exec {
                    ignoreExitValue = true
                    commandLine gradlewBatCommand, 'rerunCucumber' // Windows에서는 gradlew.bat 실행
                }
            } else {
                result = exec {
                    ignoreExitValue = true
                    commandLine 'sh', '-c', "$gradlewCommand rerunCucumber" // Mac/Linux에서는 gradlew 실행
                }
            }
            println "eeeeeeeeeee $result"
            if (result.exitValue == 0) {
                println "✅ [Attempt $attempt] 재시도 성공!"
                break
            } else {
                println "❌ [Attempt $attempt] 실패, 다음 시도..."
            }
            attempt++
        }
    }
}

cucumberCli.finalizedBy retryFailedTests

// retryFailedTests 실행 후 Slack 알림을 보내도록 설정
retryFailedTests.finalizedBy sendSlackNotification

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}